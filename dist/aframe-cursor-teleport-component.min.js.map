{"version":3,"file":"aframe-cursor-teleport-component.min.js","mappings":"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","sources":["webpack://aframe-cursor-teleport-component/webpack/universalModuleDefinition","webpack://aframe-cursor-teleport-component/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","/* global AFRAME, THREE */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error(\n    'Component attempted to register before AFRAME was available.'\n  );\n}\n\n/**\n * Cursor Teleport component for A-Frame.\n */\nAFRAME.registerComponent('cursor-teleport', {\n  schema: {\n    cameraHead: { type: 'selector', default: '' },\n    cameraRig: { type: 'selector', default: '' },\n    collisionEntities: { type: 'string', default: '' },\n    ignoreEntities: { type: 'string', default: '' },\n    landingMaxAngle: { default: 45, min: 0, max: 360 },\n    landingNormal: { type: 'vec3', default: { x: 0, y: 1, z: 0 } },\n    transitionSpeed: { type: 'number', default: 0.0006 }\n  },\n\n  init() {\n    // platform detect\n    this.mobile =\n      AFRAME.utils.device.isMobile() ||\n      AFRAME.utils.device.isMobileDeviceRequestingDesktopSite();\n\n    // main app\n    const sceneEl = this.el.sceneEl;\n    this.canvas = sceneEl.renderer.domElement;\n\n    // camera\n    this.data.cameraHead.object3D.traverse((child) => {\n      if (child instanceof THREE.Camera) {\n        this.cam = child;\n      }\n    });\n\n    this.camRig = this.data.cameraRig.object3D;\n\n    // collision\n    this.rayCaster = new THREE.Raycaster();\n    this.collisionObjectNormalMatrix = new THREE.Matrix3();\n    this.collisionWorldNormal = new THREE.Vector3();\n    this.referenceNormal = new THREE.Vector3();\n    this.rayCastObjects = [];\n\n    // Update collision normal\n    this.referenceNormal.copy(this.data.landingNormal);\n\n    // teleport indicator\n    const geo = new THREE.RingGeometry(0.25, 0.3, 32, 1);\n    geo.rotateX(-Math.PI / 2);\n    geo.translate(0, 0.02, 0);\n    const mat = new THREE.MeshBasicMaterial();\n    const indicatorRing = new THREE.Mesh(geo, mat);\n    this.teleportIndicator = indicatorRing;\n    this.teleportIndicator.visible = false;\n\n    sceneEl.object3D.add(this.teleportIndicator);\n\n    // transition\n    this.transitioning = false;\n    this.transitionProgress = 0;\n    this.transitionCamPosStart = new THREE.Vector3();\n    this.transitionCamPosEnd = new THREE.Vector3();\n\n    // Bind functions\n    this.updateRaycastObjects = this.updateRaycastObjects.bind(this);\n    this.getMouseState = this.getMouseState.bind(this);\n    this.getTeleportPosition = this.getTeleportPosition.bind(this);\n    this.isValidNormalsAngle = this.isValidNormalsAngle.bind(this);\n    this.transition = this.transition.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.easeInOutQuad = this.easeInOutQuad.bind(this);\n    this.hideCursor = this.hideCursor.bind(this);\n\n    this.updateRaycastObjects();\n  },\n\n  remove() {\n    this.cam = null;\n    this.canvas = null;\n    this.rayCastObjects.length = 0;\n    this.el.sceneEl.object3D.remove(this.teleportIndicator);\n    this.teleportIndicator.material.dispose();\n    this.teleportIndicator.geometry.dispose();\n    this.teleportIndicator = null;\n    if (this.collisionMesh) {\n      this.collisionMesh.geometry.dispose();\n      this.collisionMesh.material.dispose();\n      this.collisionMesh = null;\n    }\n  },\n\n  play() {\n    const canvas = this.canvas;\n    canvas.addEventListener('mousedown', this.mouseDown, false);\n    canvas.addEventListener('mousemove', this.mouseMove, false);\n    canvas.addEventListener('mouseup', this.mouseUp, false);\n    canvas.addEventListener('touchstart', this.mouseDown, false);\n    canvas.addEventListener('touchmove', this.mouseMove, false);\n    canvas.addEventListener('touchend', this.mouseUp, false);\n    window.addEventListener('keydown', this.hideCursor, false);\n  },\n\n  pause() {\n    this.transitioning = false;\n    this.hideCursor();\n    const canvas = this.canvas;\n    canvas.removeEventListener('mousedown', this.mouseDown);\n    canvas.removeEventListener('mousemove', this.mouseMove);\n    canvas.removeEventListener('mouseup', this.mouseUp);\n    canvas.removeEventListener('touchstart', this.mouseDown);\n    canvas.removeEventListener('touchmove', this.mouseMove);\n    canvas.removeEventListener('touchend', this.mouseUp);\n    window.removeEventListener('keydown', this.hideCursor);\n  },\n\n  updateRaycastObjects() {\n    // updates the array of meshes we will need to raycast to\n    // clear the array of any existing meshes\n    this.rayCastObjects.length = 0;\n\n    if (this.data.collisionEntities !== '') {\n      // traverse collision entities and add their meshes to the rayCastEntities array.\n      const collisionEntities = this.el.sceneEl.querySelectorAll(\n        this.data.collisionEntities\n      );\n\n      collisionEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            // mark this mesh as a collision object\n            child.userData.collision = true;\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    } else {\n      if (!this.collisionMesh) {\n        // if no collision entities are specified, create a default ground plane collision.\n        const geo = new THREE.PlaneGeometry(50, 50, 1);\n        geo.rotateX(-Math.PI / 2);\n        const mat = new THREE.MeshNormalMaterial();\n        const collisionMesh = new THREE.Mesh(geo, mat);\n        // mark this mesh as a collision object\n        collisionMesh.userData.collision = true;\n        this.collisionMesh = collisionMesh;\n      }\n      this.rayCastObjects.push(this.collisionMesh);\n    }\n\n    // We may need some entities to be seen by the raycaster even though they are not teleportable.\n    // This prevents the user from unnesserily teleporting when clicking things like buttons or UI.\n    if (this.data.ignoreEntities !== '') {\n      const ignoreEntities = this.el.sceneEl.querySelectorAll(\n        this.data.ignoreEntities\n      );\n      ignoreEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    }\n  },\n\n  getMouseState: (function () {\n    const coordinates = new THREE.Vector2();\n    return function (e) {\n      const rect = this.canvas.getBoundingClientRect();\n      if (e.clientX != null) {\n        coordinates.x = e.clientX - rect.left;\n        coordinates.y = e.clientY - rect.top;\n        return coordinates;\n      } else if (e.touches[0] != null) {\n        coordinates.x = e.touches[0].clientX - rect.left;\n        coordinates.y = e.touches[0].clientY - rect.top;\n        return coordinates;\n      }\n    };\n  })(),\n\n  getTeleportPosition: (function () {\n    const mouse = new THREE.Vector2();\n    return function (mouseX, mouseY) {\n      if (this.rayCastObjects.length !== 0) {\n        if (this.cam && this.canvas) {\n          const cam = this.cam;\n          const rect = this.canvas.getBoundingClientRect();\n\n          mouse.x = (mouseX / (rect.right - rect.left)) * 2 - 1;\n          mouse.y = -(mouseY / (rect.bottom - rect.top)) * 2 + 1;\n          this.rayCaster.setFromCamera(mouse, cam);\n          const intersects = this.rayCaster.intersectObjects(\n            this.rayCastObjects\n          );\n          if (\n            intersects.length !== 0 &&\n            this.isValidNormalsAngle(intersects[0].face.normal, intersects[0].object)\n          ) {\n            if (intersects[0].object.userData.collision === true) {\n              return intersects[0].point;\n            }\n            return false;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n  })(),\n\n  isValidNormalsAngle(collisionNormal, collisionObject) {\n    this.collisionObjectNormalMatrix.getNormalMatrix(collisionObject.matrixWorld);\n    this.collisionWorldNormal.copy(collisionNormal).applyNormalMatrix(this.collisionObjectNormalMatrix);\n    const angleNormals = this.referenceNormal.angleTo(this.collisionWorldNormal);\n    return THREE.MathUtils.RAD2DEG * angleNormals <= this.data.landingMaxAngle;\n  },\n\n  transition(destPos) {\n    this.transitionProgress = 0;\n    this.transitionCamPosEnd.copy(destPos);\n    this.transitionCamPosStart.copy(this.camRig.position);\n    this.transitioning = true;\n    this.el.emit('navigation-start');\n  },\n\n  hideCursor() {\n    this.teleportIndicator.visible = false;\n  },\n\n  mouseMove(e) {\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n  },\n\n  mouseDown(e) {\n    this.updateRaycastObjects();\n\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n\n    this.mouseXOrig = mouseState.x;\n    this.mouseYOrig = mouseState.y;\n  },\n\n  mouseUp(e) {\n    if (this.mouseX === this.mouseXOrig && this.mouseY === this.mouseYOrig) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.visible = true;\n        this.teleportIndicator.position.copy(pos);\n        this.transition(pos);\n      }\n    }\n  },\n\n  easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n\n  tick(time, delta) {\n    if (!this.transitioning && !this.mobile) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.position.copy(pos);\n      }\n    }\n    if (this.transitioning) {\n      this.transitionProgress += delta * this.data.transitionSpeed;\n      const easeInOutTransitionProgress = this.easeInOutQuad(\n        this.transitionProgress\n      );\n\n      // set camera position\n      const camPos = this.camRig.position;\n      camPos.lerpVectors(\n        this.transitionCamPosStart,\n        this.transitionCamPosEnd,\n        easeInOutTransitionProgress\n      );\n\n      if (this.transitionProgress >= 1) {\n        this.transitioning = false;\n        camPos.copy(this.transitionCamPosEnd);\n        this.el.emit('navigation-end');\n      }\n    }\n  }\n});\n"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","Error","registerComponent","schema","cameraHead","type","default","cameraRig","collisionEntities","ignoreEntities","landingMaxAngle","min","max","landingNormal","x","y","z","transitionSpeed","init","this","mobile","utils","device","isMobile","isMobileDeviceRequestingDesktopSite","sceneEl","el","canvas","renderer","domElement","data","object3D","traverse","child","THREE","Camera","cam","camRig","rayCaster","Raycaster","collisionObjectNormalMatrix","Matrix3","collisionWorldNormal","Vector3","referenceNormal","rayCastObjects","copy","geo","RingGeometry","rotateX","Math","PI","translate","mat","MeshBasicMaterial","indicatorRing","Mesh","teleportIndicator","visible","add","transitioning","transitionProgress","transitionCamPosStart","transitionCamPosEnd","updateRaycastObjects","bind","getMouseState","getTeleportPosition","isValidNormalsAngle","transition","mouseMove","mouseDown","mouseUp","easeInOutQuad","hideCursor","remove","length","material","dispose","geometry","collisionMesh","play","addEventListener","window","pause","removeEventListener","querySelectorAll","forEach","e","isMesh","userData","collision","push","PlaneGeometry","MeshNormalMaterial","coordinates","Vector2","rect","getBoundingClientRect","clientX","left","clientY","top","touches","mouse","mouseX","mouseY","right","bottom","setFromCamera","intersects","intersectObjects","face","normal","object","point","collisionNormal","collisionObject","getNormalMatrix","matrixWorld","applyNormalMatrix","angleNormals","angleTo","MathUtils","RAD2DEG","destPos","position","emit","mouseState","mouseXOrig","mouseYOrig","pos","t","tick","time","delta","easeInOutTransitionProgress","camPos","lerpVectors"],"sourceRoot":""}