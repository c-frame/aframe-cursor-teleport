{"version":3,"file":"aframe-cursor-teleport-component.min.js","mappings":"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","sources":["webpack://aframe-cursor-teleport-component/webpack/universalModuleDefinition","webpack://aframe-cursor-teleport-component/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","/* global AFRAME, THREE */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error(\n    'Component attempted to register before AFRAME was available.'\n  );\n}\n\n/**\n * Cursor Teleport component for A-Frame.\n */\nAFRAME.registerComponent('cursor-teleport', {\n  schema: {\n    cameraHead: { type: 'selector', default: '' },\n    cameraRig: { type: 'selector', default: '' },\n    collisionEntities: { type: 'string', default: '' },\n    ignoreEntities: { type: 'string', default: '' },\n    landingMaxAngle: { default: 45, min: 0, max: 360 },\n    landingNormal: { type: 'vec3', default: { x: 0, y: 1, z: 0 } },\n    transitionSpeed: { type: 'number', default: 0.0006 }\n  },\n\n  init() {\n    // platform detect\n    this.mobile =\n      AFRAME.utils.device.isMobile() ||\n      AFRAME.utils.device.isMobileDeviceRequestingDesktopSite();\n\n    // main app\n    const sceneEl = this.el.sceneEl;\n    this.canvas = sceneEl.renderer.domElement;\n\n    // camera\n    this.data.cameraHead.object3D.traverse((child) => {\n      if (child instanceof THREE.Camera) {\n        this.cam = child;\n      }\n    });\n\n    this.camRig = this.data.cameraRig.object3D;\n\n    // collision\n    this.rayCaster = new THREE.Raycaster();\n    this.referenceNormal = new THREE.Vector3();\n    this.rayCastObjects = [];\n\n    // Update collision normal\n    this.referenceNormal.copy(this.data.landingNormal);\n\n    // teleport indicator\n    const geo = new THREE.RingGeometry(0.25, 0.3, 32, 1);\n    geo.rotateX(-Math.PI / 2);\n    geo.translate(0, 0.02, 0);\n    const mat = new THREE.MeshBasicMaterial();\n    const indicatorRing = new THREE.Mesh(geo, mat);\n    this.teleportIndicator = indicatorRing;\n    this.teleportIndicator.visible = false;\n\n    sceneEl.object3D.add(this.teleportIndicator);\n\n    // transition\n    this.transitioning = false;\n    this.transitionProgress = 0;\n    this.transitionCamPosStart = new THREE.Vector3();\n    this.transitionCamPosEnd = new THREE.Vector3();\n\n    // Bind functions\n    this.updateRaycastObjects = this.updateRaycastObjects.bind(this);\n    this.getMouseState = this.getMouseState.bind(this);\n    this.getTeleportPosition = this.getTeleportPosition.bind(this);\n    this.isValidNormalsAngle = this.isValidNormalsAngle.bind(this);\n    this.transition = this.transition.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.easeInOutQuad = this.easeInOutQuad.bind(this);\n    this.hideCursor = this.hideCursor.bind(this);\n\n    this.updateRaycastObjects();\n  },\n\n  remove() {\n    this.cam = null;\n    this.canvas = null;\n    this.rayCastObjects.length = 0;\n    this.el.sceneEl.object3D.remove(this.teleportIndicator);\n    this.teleportIndicator.material.dispose();\n    this.teleportIndicator.geometry.dispose();\n    this.teleportIndicator = null;\n    if (this.collisionMesh) {\n      this.collisionMesh.geometry.dispose();\n      this.collisionMesh.material.dispose();\n      this.collisionMesh = null;\n    }\n  },\n\n  play() {\n    const canvas = this.canvas;\n    canvas.addEventListener('mousedown', this.mouseDown, false);\n    canvas.addEventListener('mousemove', this.mouseMove, false);\n    canvas.addEventListener('mouseup', this.mouseUp, false);\n    canvas.addEventListener('touchstart', this.mouseDown, false);\n    canvas.addEventListener('touchmove', this.mouseMove, false);\n    canvas.addEventListener('touchend', this.mouseUp, false);\n    window.addEventListener('keydown', this.hideCursor, false);\n  },\n\n  pause() {\n    this.transitioning = false;\n    this.hideCursor();\n    const canvas = this.canvas;\n    canvas.removeEventListener('mousedown', this.mouseDown);\n    canvas.removeEventListener('mousemove', this.mouseMove);\n    canvas.removeEventListener('mouseup', this.mouseUp);\n    canvas.removeEventListener('touchstart', this.mouseDown);\n    canvas.removeEventListener('touchmove', this.mouseMove);\n    canvas.removeEventListener('touchend', this.mouseUp);\n    window.removeEventListener('keydown', this.hideCursor);\n  },\n\n  updateRaycastObjects() {\n    // updates the array of meshes we will need to raycast to\n    // clear the array of any existing meshes\n    this.rayCastObjects.length = 0;\n\n    if (this.data.collisionEntities !== '') {\n      // traverse collision entities and add their meshes to the rayCastEntities array.\n      const collisionEntities = this.el.sceneEl.querySelectorAll(\n        this.data.collisionEntities\n      );\n\n      collisionEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            // mark this mesh as a collision object\n            child.userData.collision = true;\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    } else {\n      if (!this.collisionMesh) {\n        // if no collision entities are specified, create a default ground plane collision.\n        const geo = new THREE.PlaneGeometry(50, 50, 1);\n        geo.rotateX(-Math.PI / 2);\n        const mat = new THREE.MeshNormalMaterial();\n        const collisionMesh = new THREE.Mesh(geo, mat);\n        // mark this mesh as a collision object\n        collisionMesh.userData.collision = true;\n        this.collisionMesh = collisionMesh;\n      }\n      this.rayCastObjects.push(this.collisionMesh);\n    }\n\n    // We may need some entities to be seen by the raycaster even though they are not teleportable.\n    // This prevents the user from unnesserily teleporting when clicking things like buttons or UI.\n    if (this.data.ignoreEntities !== '') {\n      const ignoreEntities = this.el.sceneEl.querySelectorAll(\n        this.data.ignoreEntities\n      );\n      ignoreEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    }\n  },\n\n  getMouseState: (function () {\n    const coordinates = new THREE.Vector2();\n    return function (e) {\n      const rect = this.canvas.getBoundingClientRect();\n      if (e.clientX != null) {\n        coordinates.x = e.clientX - rect.left;\n        coordinates.y = e.clientY - rect.top;\n        return coordinates;\n      } else if (e.touches[0] != null) {\n        coordinates.x = e.touches[0].clientX - rect.left;\n        coordinates.y = e.touches[0].clientY - rect.top;\n        return coordinates;\n      }\n    };\n  })(),\n\n  getTeleportPosition: (function () {\n    const mouse = new THREE.Vector2();\n    return function (mouseX, mouseY) {\n      if (this.rayCastObjects.length !== 0) {\n        if (this.cam && this.canvas) {\n          const cam = this.cam;\n          const rect = this.canvas.getBoundingClientRect();\n\n          mouse.x = (mouseX / (rect.right - rect.left)) * 2 - 1;\n          mouse.y = -(mouseY / (rect.bottom - rect.top)) * 2 + 1;\n          this.rayCaster.setFromCamera(mouse, cam);\n          const intersects = this.rayCaster.intersectObjects(\n            this.rayCastObjects\n          );\n          if (\n            intersects.length !== 0 &&\n            this.isValidNormalsAngle(intersects[0].face.normal)\n          ) {\n            if (intersects[0].object.userData.collision === true) {\n              return intersects[0].point;\n            }\n            return false;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n  })(),\n\n  isValidNormalsAngle(collisionNormal) {\n    const angleNormals = this.referenceNormal.angleTo(collisionNormal);\n    return THREE.MathUtils.RAD2DEG * angleNormals <= this.data.landingMaxAngle;\n  },\n\n  transition(destPos) {\n    this.transitionProgress = 0;\n    this.transitionCamPosEnd.copy(destPos);\n    this.transitionCamPosStart.copy(this.camRig.position);\n    this.transitioning = true;\n  },\n\n  hideCursor() {\n    this.teleportIndicator.visible = false;\n  },\n\n  mouseMove(e) {\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n  },\n\n  mouseDown(e) {\n    this.updateRaycastObjects();\n\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n\n    this.mouseXOrig = mouseState.x;\n    this.mouseYOrig = mouseState.y;\n  },\n\n  mouseUp(e) {\n    if (this.mouseX === this.mouseXOrig && this.mouseY === this.mouseYOrig) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.visible = true;\n        this.teleportIndicator.position.copy(pos);\n        this.transition(pos);\n      }\n    }\n  },\n\n  easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n\n  tick(time, delta) {\n    if (!this.transitioning && !this.mobile) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.position.copy(pos);\n      }\n    }\n    if (this.transitioning) {\n      this.transitionProgress += delta * this.data.transitionSpeed;\n      const easeInOutTransitionProgress = this.easeInOutQuad(\n        this.transitionProgress\n      );\n\n      // set camera position\n      const camPos = this.camRig.position;\n      camPos.x =\n        this.transitionCamPosStart.x +\n        (this.transitionCamPosEnd.x - this.transitionCamPosStart.x) *\n          easeInOutTransitionProgress;\n      camPos.y =\n        this.transitionCamPosStart.y +\n        (this.transitionCamPosEnd.y - this.transitionCamPosStart.y) *\n          easeInOutTransitionProgress;\n      camPos.z =\n        this.transitionCamPosStart.z +\n        (this.transitionCamPosEnd.z - this.transitionCamPosStart.z) *\n          easeInOutTransitionProgress;\n\n      if (this.transitionProgress >= 1) {\n        this.transitioning = false;\n        camPos.copy(this.transitionCamPosEnd);\n      }\n    }\n  }\n});\n"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","Error","registerComponent","schema","cameraHead","type","default","cameraRig","collisionEntities","ignoreEntities","landingMaxAngle","min","max","landingNormal","x","y","z","transitionSpeed","init","this","mobile","utils","device","isMobile","isMobileDeviceRequestingDesktopSite","sceneEl","el","canvas","renderer","domElement","data","object3D","traverse","child","THREE","Camera","cam","camRig","rayCaster","Raycaster","referenceNormal","Vector3","rayCastObjects","copy","geo","RingGeometry","rotateX","Math","PI","translate","mat","MeshBasicMaterial","indicatorRing","Mesh","teleportIndicator","visible","add","transitioning","transitionProgress","transitionCamPosStart","transitionCamPosEnd","updateRaycastObjects","bind","getMouseState","getTeleportPosition","isValidNormalsAngle","transition","mouseMove","mouseDown","mouseUp","easeInOutQuad","hideCursor","remove","length","material","dispose","geometry","collisionMesh","play","addEventListener","window","pause","removeEventListener","querySelectorAll","forEach","e","isMesh","userData","collision","push","PlaneGeometry","MeshNormalMaterial","coordinates","Vector2","rect","getBoundingClientRect","clientX","left","clientY","top","touches","mouse","mouseX","mouseY","right","bottom","setFromCamera","intersects","intersectObjects","face","normal","object","point","collisionNormal","angleNormals","angleTo","MathUtils","RAD2DEG","destPos","position","mouseState","mouseXOrig","mouseYOrig","pos","t","tick","time","delta","easeInOutTransitionProgress","camPos"],"sourceRoot":""}