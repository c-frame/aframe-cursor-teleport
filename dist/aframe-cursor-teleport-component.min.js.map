{"version":3,"file":"aframe-cursor-teleport-component.min.js","mappings":"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","sources":["webpack://aframe-cursor-teleport-component/webpack/universalModuleDefinition","webpack://aframe-cursor-teleport-component/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","/* global AFRAME, THREE */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error(\n    'Component attempted to register before AFRAME was available.'\n  );\n}\n\n/**\n * Cursor Teleport component for A-Frame.\n */\nAFRAME.registerComponent('cursor-teleport', {\n  schema: {\n    cameraHead: { type: 'selector', default: '' },\n    cameraRig: { type: 'selector', default: '' },\n    collisionEntities: { type: 'string', default: '' },\n    ignoreEntities: { type: 'string', default: '' },\n    landingMaxAngle: { default: 45, min: 0, max: 360 },\n    landingNormal: { type: 'vec3', default: { x: 0, y: 1, z: 0 } },\n    transitionSpeed: { type: 'number', default: 0.0006 }\n  },\n\n  init() {\n    // platform detect\n    this.mobile = AFRAME.utils.device.isMobile();\n\n    // main app\n    const sceneEl = this.el.sceneEl;\n    this.canvas = sceneEl.renderer.domElement;\n\n    // camera\n    this.data.cameraHead.object3D.traverse((child) => {\n      if (child instanceof THREE.Camera) {\n        this.cam = child;\n      }\n    });\n\n    this.camRig = this.data.cameraRig.object3D;\n\n    // collision\n    this.rayCaster = new THREE.Raycaster();\n    this.referenceNormal = new THREE.Vector3();\n    this.rayCastObjects = [];\n\n    // Update collision normal\n    this.referenceNormal.copy(this.data.landingNormal);\n\n    // teleport indicator\n    const geo = new THREE.RingGeometry(0.25, 0.3, 32, 1);\n    geo.rotateX(-Math.PI / 2);\n    geo.translate(0, 0.02, 0);\n    const mat = new THREE.MeshBasicMaterial();\n    const indicatorRing = new THREE.Mesh(geo, mat);\n    this.teleportIndicator = indicatorRing;\n\n    sceneEl.object3D.add(this.teleportIndicator);\n\n    // transition\n    this.transitioning = false;\n    this.transitionProgress = 0;\n    this.transitionCamPosStart = new THREE.Vector3();\n    this.transitionCamPosEnd = new THREE.Vector3();\n\n    // Bind functions\n    this.updateRaycastObjects = this.updateRaycastObjects.bind(this);\n    this.getMouseState = this.getMouseState.bind(this);\n    this.getTeleportPosition = this.getTeleportPosition.bind(this);\n    this.isValidNormalsAngle = this.isValidNormalsAngle.bind(this);\n    this.transition = this.transition.bind(this);\n    this.mouseMove = this.mouseMove.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.easeInOutQuad = this.easeInOutQuad.bind(this);\n\n    this.updateRaycastObjects();\n  },\n\n  remove() {\n    this.cam = null;\n    this.canvas = null;\n    this.rayCastObjects.length = 0;\n    this.el.sceneEl.object3D.remove(this.teleportIndicator);\n    this.teleportIndicator.material.dispose();\n    this.teleportIndicator.geometry.dispose();\n    this.teleportIndicator = null;\n    if (this.collisionMesh) {\n      this.collisionMesh.geometry.dispose();\n      this.collisionMesh.material.dispose();\n      this.collisionMesh = null;\n    }\n  },\n\n  play() {\n    const canvas = this.canvas;\n    canvas.addEventListener('mousedown', this.mouseDown, false);\n    canvas.addEventListener('mousemove', this.mouseMove, false);\n    canvas.addEventListener('mouseup', this.mouseUp, false);\n    canvas.addEventListener('touchstart', this.mouseDown, false);\n    canvas.addEventListener('touchmove', this.mouseMove, false);\n    canvas.addEventListener('touchend', this.mouseUp, false);\n  },\n\n  pause() {\n    const canvas = this.canvas;\n    canvas.removeEventListener('mousedown', this.mouseDown);\n    canvas.removeEventListener('mousemove', this.mouseMove);\n    canvas.removeEventListener('mouseup', this.mouseUp);\n    canvas.removeEventListener('touchstart', this.mouseDown);\n    canvas.removeEventListener('touchmove', this.mouseMove);\n    canvas.removeEventListener('touchend', this.mouseUp);\n  },\n\n  updateRaycastObjects() {\n    // updates the array of meshes we will need to raycast to\n    // clear the array of any existing meshes\n    this.rayCastObjects.length = 0;\n\n    if (this.data.collisionEntities !== '') {\n      // traverse collision entities and add their meshes to the rayCastEntities array.\n      const collisionEntities = this.el.sceneEl.querySelectorAll(\n        this.data.collisionEntities\n      );\n\n      collisionEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            // mark this mesh as a collision object\n            child.userData.collision = true;\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    } else {\n      if (!this.collisionMesh) {\n        // if no collision entities are specified, create a default ground plane collision.\n        const geo = new THREE.PlaneGeometry(50, 50, 1);\n        geo.rotateX(-Math.PI / 2);\n        const mat = new THREE.MeshNormalMaterial();\n        const collisionMesh = new THREE.Mesh(geo, mat);\n        // mark this mesh as a collision object\n        collisionMesh.userData.collision = true;\n        this.collisionMesh = collisionMesh;\n      }\n      this.rayCastObjects.push(this.collisionMesh);\n    }\n\n    // We may need some entities to be seen by the raycaster even though they are not teleportable.\n    // This prevents the user from unnesserily teleporting when clicking things like buttons or UI.\n    if (this.data.ignoreEntities !== '') {\n      const ignoreEntities = this.el.sceneEl.querySelectorAll(\n        this.data.ignoreEntities\n      );\n      ignoreEntities.forEach((e) => {\n        e.object3D.traverse((child) => {\n          if (child.isMesh) {\n            this.rayCastObjects.push(child);\n          }\n        });\n      });\n    }\n  },\n\n  getMouseState: (function () {\n    const coordinates = new THREE.Vector2();\n    return function (e) {\n      const rect = this.canvas.getBoundingClientRect();\n      if (e.clientX != null) {\n        coordinates.x = e.clientX - rect.left;\n        coordinates.y = e.clientY - rect.top;\n        return coordinates;\n      } else if (e.touches[0] != null) {\n        coordinates.x = e.touches[0].clientX - rect.left;\n        coordinates.y = e.touches[0].clientY - rect.top;\n        return coordinates;\n      }\n    };\n  })(),\n\n  getTeleportPosition: (function () {\n    const mouse = new THREE.Vector2();\n    return function (mouseX, mouseY) {\n      if (this.rayCastObjects.length !== 0) {\n        if (this.cam && this.canvas) {\n          const cam = this.cam;\n          const rect = this.canvas.getBoundingClientRect();\n\n          mouse.x = (mouseX / (rect.right - rect.left)) * 2 - 1;\n          mouse.y = -(mouseY / (rect.bottom - rect.top)) * 2 + 1;\n          this.rayCaster.setFromCamera(mouse, cam);\n          const intersects = this.rayCaster.intersectObjects(\n            this.rayCastObjects\n          );\n          if (\n            intersects.length !== 0 &&\n            this.isValidNormalsAngle(intersects[0].face.normal)\n          ) {\n            if (intersects[0].object.userData.collision === true) {\n              return intersects[0].point;\n            }\n            return false;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    };\n  })(),\n\n  isValidNormalsAngle(collisionNormal) {\n    const angleNormals = this.referenceNormal.angleTo(collisionNormal);\n    return THREE.MathUtils.RAD2DEG * angleNormals <= this.data.landingMaxAngle;\n  },\n\n  transition(destPos) {\n    this.transitionProgress = 0;\n    this.transitionCamPosEnd.copy(destPos);\n    this.transitionCamPosStart.copy(this.camRig.position);\n    this.transitioning = true;\n  },\n\n  mouseMove(e) {\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n  },\n\n  mouseDown(e) {\n    this.updateRaycastObjects();\n\n    const mouseState = this.getMouseState(e);\n    this.mouseX = mouseState.x;\n    this.mouseY = mouseState.y;\n\n    this.mouseXOrig = mouseState.x;\n    this.mouseYOrig = mouseState.y;\n  },\n\n  mouseUp(e) {\n    if (this.mouseX === this.mouseXOrig && this.mouseY === this.mouseYOrig) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.position.copy(pos);\n        this.transition(pos);\n      }\n    }\n  },\n\n  easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n\n  tick(time, delta) {\n    if (!this.transitioning && !this.mobile) {\n      const pos = this.getTeleportPosition(this.mouseX, this.mouseY);\n      if (pos) {\n        this.teleportIndicator.position.copy(pos);\n      }\n    }\n    if (this.transitioning) {\n      this.transitionProgress += delta * this.data.transitionSpeed;\n      const easeInOutTransitionProgress = this.easeInOutQuad(\n        this.transitionProgress\n      );\n\n      // set camera position\n      const camPos = this.camRig.position;\n      camPos.x =\n        this.transitionCamPosStart.x +\n        (this.transitionCamPosEnd.x - this.transitionCamPosStart.x) *\n          easeInOutTransitionProgress;\n      camPos.y =\n        this.transitionCamPosStart.y +\n        (this.transitionCamPosEnd.y - this.transitionCamPosStart.y) *\n          easeInOutTransitionProgress;\n      camPos.z =\n        this.transitionCamPosStart.z +\n        (this.transitionCamPosEnd.z - this.transitionCamPosStart.z) *\n          easeInOutTransitionProgress;\n\n      if (this.transitionProgress >= 1) {\n        this.transitioning = false;\n        camPos.copy(this.transitionCamPosEnd);\n      }\n    }\n  }\n});\n"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","Error","registerComponent","schema","cameraHead","type","default","cameraRig","collisionEntities","ignoreEntities","landingMaxAngle","min","max","landingNormal","x","y","z","transitionSpeed","init","this","mobile","utils","device","isMobile","sceneEl","el","canvas","renderer","domElement","data","object3D","traverse","child","THREE","Camera","cam","camRig","rayCaster","Raycaster","referenceNormal","Vector3","rayCastObjects","copy","geo","RingGeometry","rotateX","Math","PI","translate","mat","MeshBasicMaterial","indicatorRing","Mesh","teleportIndicator","add","transitioning","transitionProgress","transitionCamPosStart","transitionCamPosEnd","updateRaycastObjects","bind","getMouseState","getTeleportPosition","isValidNormalsAngle","transition","mouseMove","mouseDown","mouseUp","easeInOutQuad","remove","length","material","dispose","geometry","collisionMesh","play","addEventListener","pause","removeEventListener","querySelectorAll","forEach","e","isMesh","userData","collision","push","PlaneGeometry","MeshNormalMaterial","coordinates","Vector2","rect","getBoundingClientRect","clientX","left","clientY","top","touches","mouse","mouseX","mouseY","right","bottom","setFromCamera","intersects","intersectObjects","face","normal","object","point","collisionNormal","angleNormals","angleTo","MathUtils","RAD2DEG","destPos","position","mouseState","mouseXOrig","mouseYOrig","pos","t","tick","time","delta","easeInOutTransitionProgress","camPos"],"sourceRoot":""}